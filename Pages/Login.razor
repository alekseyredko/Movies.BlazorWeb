@page "/login"
@using Movies.Infrastructure.Services.Interfaces
@using Movies.Infrastructure.Models

@inject AuthenticationStateProvider authenticationStateProvider;
@inject ICustomAuthentication customAuthentication;
@inject NavigationManager NavigationManager


<h3>Log in</h3>

<input type="text" @bind-value="login"/>
<h6>Password</h6>
<input id="Password1" type="password" @bind-value="password"/>
<input id="Button1" type="button" value="button" @onclick="LogUsername"/>

@if (response != null)
{
    @if (response.ResultType != ResultType.Ok)
    {
        <ErrorResult Result="response"/>
    }
}


@code {
    private string login { get; set; }
    private string password { get; set; }

    private Result<LoginUserResponse> response;

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task LogUsername()
    {
        await authenticationStateTask;

        var userRequest = new LoginUserRequest()
        {
            Login = login,
            Password = password
        };
        response = await ((ICustomAuthentication)authenticationStateProvider).TryLoginAsync(userRequest);
        if (response.ResultType == ResultType.Ok)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}

